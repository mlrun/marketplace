kind: job
verbose: false
spec:
  entry_points:
    infer:
      has_kwargs: true
      lineno: 102
      has_varargs: false
      doc: 'Perform a prediction on the provided dataset using the specified model.

        Ensure that the model has already been logged under the current project.


        If you wish to apply monitoring tools (e.g., drift analysis), set the perform_drift_analysis
        parameter to True.

        This will create a new model endpoint record under the specified model_endpoint_name.

        Additionally, ensure that model monitoring is enabled at the project level
        by calling the

        project.enable_model_monitoring() function. You can also apply monitoring
        to an existing model by providing its

        endpoint id or name, and the monitoring tools will be applied to that endpoint.


        At the moment, this function is supported for `mlrun>=1.5.0` versions.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
      - name: dataset
        type: Union[DataItem, list, dict, DataFrame, Series, ndarray]
        doc: The dataset to infer through the model. Provided as an input (DataItem)
          that represents Dataset artifact / Feature vector URI. If using MLRun SDK,
          `dataset` can also be provided as a list, dictionary or numpy array.
      - name: model_path
        type: Union[str, DataItem]
        doc: Model store uri (should start with store://). Provided as an input (DataItem).
          If using MLRun SDK, `model_path` can also be provided as a parameter (string).
          To generate a valid model store URI, please log the model before running
          this function. If `endpoint_id` of existing model endpoint is provided,
          make sure that it has a similar model store path, otherwise the drift analysis
          won't be triggered.
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: A string / integer or a list of strings / integers that represent the
          column names / indices to drop. When the dataset is a list or a numpy array
          this parameter must be represented by integers.
        default: null
      - name: label_columns
        type: Union[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset for Regression or
          Classification tasks. The label column can be accessed from the model object,
          or the feature vector provided if available.
        default: null
      - name: feature_columns
        type: Union[str, List[str]]
        doc: List of feature columns that will be used to build the dataframe when
          dataset is from type list or numpy array.
        default: null
      - name: log_result_set
        type: bool
        doc: Whether to log the result set - a DataFrame of the given inputs concatenated
          with the predictions. Defaulted to True.
        default: true
      - name: result_set_name
        type: str
        doc: The db key to set name of the prediction result and the filename. Defaulted
          to 'prediction'.
        default: prediction
      - name: batch_id
        type: str
        doc: The ID of the given batch (inference dataset). If `None`, it will be
          generated. Will be logged as a result of the run.
        default: null
      - name: artifacts_tag
        type: str
        doc: Tag to use for prediction set result artifact.
        default: ''
      - name: perform_drift_analysis
        type: bool
        doc: Whether to perform drift analysis between the sample set of the model
          object to the dataset given. By default, None, which means it will perform
          drift analysis if the model already has feature stats that are considered
          as a reference sample set. Performing drift analysis on a new endpoint id
          will generate a new model endpoint record.
        default: null
      - name: endpoint_id
        type: str
        doc: Model endpoint unique ID. If `perform_drift_analysis` was set, the endpoint_id
          will be used either to perform the analysis on existing model endpoint or
          to generate a new model endpoint record.
        default: ''
      - name: model_endpoint_name
        type: str
        doc: If a new model endpoint is generated, the model name will be presented
          under this endpoint.
        default: batch-infer
      - name: model_endpoint_sample_set
        type: Union[DataItem, list, dict, DataFrame, Series, ndarray]
        doc: A sample dataset to give to compare the inputs in the drift analysis.
          Can be provided as an input (DataItem) or as a parameter (e.g. string, list,
          DataFrame). The default chosen sample set will always be the one who is
          set in the model artifact itself.
        default: null
      name: infer
  description: Batch inference (also knows as prediction) for the common ML frameworks
    (SciKit-Learn, XGBoost and LightGBM) while performing data drift analysis.
  allow_empty_resources: true
  build:
    with_mlrun: false
    code_origin: ''
    functionSourceCode: 
    origin_filename: ''
    auto_build: false
  default_handler: infer
  image: mlrun/mlrun
  disable_auto_mount: false
  command: ''
metadata:
  tag: ''
  categories:
  - utils
  - data-analysis
  - monitoring
  name: batch-inference-v2
