kind: job
metadata:
  name: azureml-utils
  tag: ''
  hash: ae4558ff52ae2c455f359251dd2ba264abb74d0f
  project: ''
  labels:
    author: yonish
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: python:3.7.9-slim
    commands:
    - python -m pip install pip==22.1.2
    - apt-get update && apt-get install -y --no-install-recommends git
    - python -m pip install azureml-core==1.40.0 azureml-train-automl-client==1.40.0
      plotly~=5.4
    code_origin: https://github.com/mlrun/functions.git#0676be90a3c0e4196d9ea3e2e90be41c01e6f3a3:/Users/yonatanshelach/yoni/projects/functions/azureml_utils/azureml_utils.py
    origin_filename: /Users/yonatanshelach/yoni/projects/functions/azureml_utils/azureml_utils.py
    with_mlrun: true
    auto_build: true
  entry_points:
    init_compute:
      name: init_compute
      doc: 'Initialize Azure ML compute target to run experiment. Checks for

        existing compute target and creates new if does not exist.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: cpu_cluster_name
        type: str
        doc: Name of Azure ML compute target. Created if does not exist.
        default: ''
      - name: vm_size
        type: str
        doc: Azure machine type for compute target.
        default: STANDARD_D2_V2
      - name: max_nodes
        type: int
        doc: Maximum number of concurrent compute targets.
        default: 1
      outputs:
      - default: ''
        doc: Azure ML Compute Target.
        type: ComputeTarget
      lineno: 87
    register_dataset:
      name: register_dataset
      doc: 'Register dataset object (can be also an Iguazio FeatureVector) in Azure
        ML.

        Uploads parquet file to Azure blob storage and registers

        that file as a dataset in Azure ML.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: dataset_name
        type: str
        doc: Name of Azure dataset to register.
        default: ''
      - name: dataset_description
        type: str
        doc: Description of Azure dataset to register.
        default: ''
      - name: data
        type: DataItem
        doc: MLRun FeatureVector or dataset object to upload.
        default: ''
      - name: create_new_version
        type: bool
        doc: Register Azure dataset as new version. Must be used when modifying dataset
          schema.
        default: false
      outputs:
      - default: ''
      lineno: 123
    download_model:
      name: download_model
      doc: Download trained model from Azure ML to local filesystem.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model_name
        type: str
        doc: Name of trained and registered model.
        default: ''
      - name: model_version
        type: int
        doc: Version of model to download.
        default: ''
      - name: target_dir
        type: str
        doc: Target directory to download model.
        default: .
      outputs:
      - default: ''
      lineno: 201
    upload_model:
      name: upload_model
      doc: Upload pre-trained model from local filesystem to Azure ML.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model_name
        type: str
        doc: Name of trained and registered model.
        default: ''
      - name: model_path
        type: str
        doc: Path to file on local filesystem.
        default: ''
      - name: model_description
        type: str
        doc: Description of models.
        default: null
      - name: model_tags
        type: dict
        doc: KV pairs of model tags.
        default: null
      outputs:
      - default: ''
      lineno: 222
    submit_training_job:
      name: submit_training_job
      doc: 'Submit training job to Azure AutoML and download trained model

        when completed. Uses previously registered dataset for training.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: experiment
        type: Experiment
        doc: Azure experiment.
        default: ''
      - name: compute_target
        type: ComputeTarget
        doc: Azure compute target.
        default: ''
      - name: register_model_name
        type: str
        doc: Name of model to register in Azure.
        default: ''
      - name: registered_dataset_name
        type: str
        doc: Name of dataset registered in Azure ML.
        default: ''
      - name: automl_settings
        type: dict
        doc: JSON string of all Azure AutoML settings.
        default: ''
      - name: training_set
        type: DataItem
        doc: Training set to log with model. For model monitoring integration.
        default: ''
      - name: label_column_name
        type: str
        doc: Name of target column in dataset.
        default: ''
      - name: save_n_models
        type: int
        doc: How many of the top performing models to log.
        default: 3
      - name: show_output
        type: bool
        doc: Displaying Azure logs.
        default: true
      outputs:
      - default: ''
      lineno: 336
    train:
      name: train
      doc: 'Whole training flow for Azure AutoML. Registers dataset/feature vector,

        submits training job to Azure AutoML, and downloads trained model

        when completed.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: dataset
        type: DataItem
        doc: MLRun FeatureVector or dataset URI to upload. Will drop index before
          uploading when it is a FeatureVector.
        default: ''
      - name: experiment_name
        type: str
        doc: Name of experiment to create in Azure ML.
        default: ''
      - name: cpu_cluster_name
        type: str
        doc: Name of Azure ML compute target. Created if does not exist.
        default: ''
      - name: vm_size
        type: str
        doc: Azure machine type for compute target.
        default: STANDARD_D2_V2
      - name: max_nodes
        type: int
        doc: Maximum number of concurrent compute targets.
        default: 1
      - name: dataset_name
        type: str
        doc: Name of Azure dataset to register.
        default: ''
      - name: dataset_description
        type: str
        doc: Description of Azure dataset to register.
        default: ''
      - name: create_new_version
        type: bool
        doc: Register Azure dataset as new version. Must be used when modifying dataset
          schema.
        default: false
      - name: label_column_name
        type: str
        doc: Target column in dataset.
        default: ''
      - name: register_model_name
        type: str
        doc: Name of model to register in Azure.
        default: ''
      - name: save_n_models
        type: int
        doc: How many of the top performing models to log.
        default: 1
      - name: log_azure
        type: bool
        doc: Displaying Azure logs.
        default: true
      - name: automl_settings
        type: str
        doc: JSON string of all Azure AutoML settings.
        default: null
      outputs:
      - default: ''
      lineno: 452
  description: Azure AutoML integration in MLRun, including utils functions for training
    models on Azure AutoML platfrom.
  default_handler: train
  disable_auto_mount: false
  allow_empty_resources: true
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
verbose: false
