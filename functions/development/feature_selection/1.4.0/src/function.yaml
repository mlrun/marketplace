kind: job
metadata:
  name: feature-selection
  tag: ''
  hash: 6dba16d062d81f78d3d210fee75edfe8b1def9b3
  project: ''
  labels:
    author: orz
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements: []
  entry_points:
    show_values_on_bars:
      name: show_values_on_bars
      doc: ''
      parameters:
      - name: axs
      - name: h_v
        default: v
      - name: space
        default: 0.4
      outputs: []
      lineno: 54
      has_varargs: false
      has_kwargs: false
    plot_stat:
      name: plot_stat
      doc: ''
      parameters:
      - name: context
      - name: stat_name
      - name: stat_df
      outputs: []
      lineno: 76
      has_varargs: false
      has_kwargs: false
    feature_selection:
      name: feature_selection
      doc: 'Applies selected feature selection statistical functions or models on
        our ''df_artifact''.


        Each statistical function or model will vote for it''s best K selected features.

        If a feature has >= ''min_votes'' votes, it will be selected.'
      parameters:
      - name: context
        doc: the function context.
      - name: df_artifact
        doc: dataframe to pass as input.
      - name: k
        type: int
        doc: number of top features to select from each statistical function or model.
        default: 5
      - name: min_votes
        type: float
        doc: minimal number of votes (from a model or by statistical function) needed
          for a feature to be selected. Can be specified by percentage of votes or
          absolute number of votes.
        default: 0.5
      - name: label_column
        type: str
        doc: ground-truth (y) labels.
        default: null
      - name: stat_filters
        type: list
        doc: statistical functions to apply to the features (from sklearn.feature_selection).
        default: null
      - name: model_filters
        type: dict
        doc: models to use for feature evaluation, can be specified by model name
          (ex. LinearSVC), formalized json (contains 'CLASS', 'FIT', 'META') or a
          path to such json file.
        default: null
      - name: max_scaled_scores
        type: bool
        doc: produce feature scores table scaled with max_scaler.
        default: true
      - name: sample_ratio
        type: float
        doc: percentage of the dataset the user whishes to compute the feature selection
          process on.
        default: null
      - name: output_vector_name
        type: float
        doc: creates a new feature vector containing only the identifies features.
        default: null
      - name: ignore_type_errors
        type: bool
        doc: skips datatypes that are neither float nor int within the feature vector.
        default: false
      - name: is_feature_vector
        type: bool
        doc: bool stating if the data is passed as a feature vector.
        default: false
      outputs: []
      lineno: 106
      has_varargs: false
      has_kwargs: false
  description: Select features through multiple Statistical and Model filters
  default_handler: feature_selection
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
